// Generated by Dagger (https://dagger.dev).
package com.mohamed.domain.usecases.driver;

import com.mohamed.domain.repositories.WorkerRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GetDriverVehicleUseCases_Factory implements Factory<GetDriverVehicleUseCases> {
  private final Provider<WorkerRepository> driverRepositoryProvider;

  public GetDriverVehicleUseCases_Factory(Provider<WorkerRepository> driverRepositoryProvider) {
    this.driverRepositoryProvider = driverRepositoryProvider;
  }

  @Override
  public GetDriverVehicleUseCases get() {
    return newInstance(driverRepositoryProvider.get());
  }

  public static GetDriverVehicleUseCases_Factory create(
      Provider<WorkerRepository> driverRepositoryProvider) {
    return new GetDriverVehicleUseCases_Factory(driverRepositoryProvider);
  }

  public static GetDriverVehicleUseCases newInstance(WorkerRepository driverRepository) {
    return new GetDriverVehicleUseCases(driverRepository);
  }
}
